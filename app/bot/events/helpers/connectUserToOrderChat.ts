import { execute } from '../../../__generated'
import {
  clientSchema$,
  mutation$,
  orderSchema$,
  providerSchema$,
  query$,
  userSchema$,
} from '../../../__generated/fetchers'
import { IOrderModel } from '../../../models/Order/types'
import { IUserModel } from '../../../models/User/types'
import { bot } from '../../index'

const FETCH_ORDER = query$.order(
  orderSchema$.chatId
    .provider(providerSchema$.id.user(userSchema$.name.telegramId.id.createdAt))
    .client(clientSchema$.id.user(userSchema$.name.telegramId.id.createdAt)),
)

const CONNECT_USER_TO_CHAT = mutation$.connectUserToChat()

interface IConnectionResult {
  isUserConnected: boolean
}

interface IConnectionOptions {
  orderId: IOrderModel['id']
  userTelegramId: IUserModel['telegramId']
}

export const connectUserToOrderChat = async ({
  orderId,
  userTelegramId,
}: IConnectionOptions): Promise<IConnectionResult> => {
  const orderResponse = await execute(FETCH_ORDER, { variables: { id: orderId } })
  const { order } = orderResponse
  let userId = ''
  let opponentUser: IUserModel | undefined = undefined
  switch (userTelegramId) {
    case order.provider.user.telegramId:
      opponentUser = order.client.user
      userId = order.provider.user.id
      break
    case order.client.user.telegramId:
      opponentUser = order.provider.user
      userId = order.client.user.id
      break
  }

  const userConnectionResponse = await execute(CONNECT_USER_TO_CHAT, {
    variables: { userId, chatId: order.chatId },
  })

  if (userConnectionResponse.connectUserToChat) {
    await bot.sendMessage(
      userTelegramId,
      `
–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–Ω–µ –æ—Ç –≤–∞—Å, –ø–æ–ª—É—á–∏—Ç ¬´${opponentUser?.name}¬ªüòä

–Ø –±—É–¥—É –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Ö, —á—Ç–æ–±—ã –æ–±–µ–∑–æ–ø–∞—Å–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–µ–ª–∫–∏ü´°ü´∂üèº

–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç —á–∞—Ç, —Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /leave_chat
–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç —Å ¬´${opponentUser?.name}¬ª, —Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /choose_chat –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —á–∞—Ç  
    `,
    )

    return { isUserConnected: true }
  }

  await bot.sendMessage(
    userTelegramId,
    '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—Å –∫ —á–∞—Ç—Éü•≤ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë —Ä–∞–∑',
  )

  return { isUserConnected: false }
}
