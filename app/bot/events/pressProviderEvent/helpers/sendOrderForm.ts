import { execute } from '../../../../__generated'
import { filledServiceAttributeSchema$, mutation$ } from '../../../../__generated/fetchers'
import { IUserModel } from '../../../../models/User/types'
import { bot } from '../../../index'
import { getCallProviderActionIfOrderFilled } from '../../helpers'
import { TOrderFetcherModel } from '../fetchers/types'

const UPDATE_ATTRIBUTE = mutation$.updateFilledServiceAttribute(
  filledServiceAttributeSchema$.value.id,
)

interface ISendOrderFormOptions {
  order: TOrderFetcherModel
  receiver: IUserModel['telegramId']
}

export const sendOrderForm = async (options: ISendOrderFormOptions) => {
  const { order, receiver } = options
  await bot.sendMessage(
    receiver,
    `
–ù–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –∞ –∫–∞–∫–∞—è-—Ç–æ –ø–æ –∂–µ–ª–∞–Ω–∏—éüôÇ

–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ü–æ–≤—Ç–æ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  `,
  )
  order.filledServicesAttributes.forEach(async ({ id, serviceAttribute, value }) => {
    const message = await bot.sendMessage(
      receiver,
      `
${serviceAttribute.name} ‚Äî ${!value && serviceAttribute.isRequired ? '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : value}

${value ? '' : serviceAttribute.notice}
    `,
    )
    bot.onReplyToMessage(receiver, message.message_id, async replyedMessage => {
      const filledAttributeResponse = await execute(UPDATE_ATTRIBUTE, {
        variables: {
          filledServiceAttributeId: id,
          filledServiceAttributeInfo: { value: replyedMessage.text },
        },
      })
      const filledAttribute = filledAttributeResponse.updateFilledServiceAttribute

      await bot.editMessageText(`${serviceAttribute.name} ‚Äî ${filledAttribute.value}`, {
        message_id: message.message_id,
        chat_id: message.chat.id,
      })

      const connectWithProviderButton = await getCallProviderActionIfOrderFilled({
        orderId: order.id,
      })

      if (connectWithProviderButton) {
        await bot.sendMessage(receiver, '–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è', {
          reply_markup: {
            inline_keyboard: [[connectWithProviderButton]],
          },
        })
      }
    })
  })
}
